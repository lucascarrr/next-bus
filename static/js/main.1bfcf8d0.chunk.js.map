{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","timeToMinutes","time","hours","minutes","split","map","Number","routesData","Hiddingh","routeName","src","destination","Sandown","currentTime","Date","route","setRoute","useState","setSrc","setDestination","formattedTime","setFormattedTime","nextBus","setNextBus","showOptions","setShowOptions","routeOptions","Object","keys","waitingTime","setWaitingTime","isFetching","setIsFetching","getNextTimes","fetch","process","then","response","json","data","schedule","src_arg","dst_arg","currentHour","getHours","currentMinute","getMinutes","currentTimeInMinutes","closestTime","closestRow","row","stop","timeParts","busHour","parseInt","busMinute","busTimeInMinutes","closestMinutes","difference","console","log","calculateWaitingTime","concat","findNextBus","weekday","getCurrentFormattedTime","toString","padStart","useEffect","React","createElement","className","onClick","toggleOptions","option","index","key","selectedRoute","selectedRouteData","selectRoute","switchPlaces","tempSrc","tempDest","id","reportWebVitals","onPerfEntry","Function","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.1bfcf8d0.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  function timeToMinutes(time) {\n    const [hours, minutes] = time.split(\":\").map(Number);\n    return hours * 60 + minutes;\n  }\n\n  function calculateWaitingTime(closestTime) {\n    const closestMinutes = timeToMinutes(closestTime);\n    const currentMinutes = timeToMinutes(formattedTime);\n    let difference = closestMinutes - currentMinutes;\n\n    console.log(closestMinutes + \" || \" + formattedTime + \" || \" + difference);\n    if (difference < 0) {\n      difference += 24 * 60; // Add 24 hours in minutes\n    }\n\n    return difference;\n  }\n\n  const routesData = {\n    Hiddingh: {\n      routeName: \"Hiddingh\",\n      src: \"Hiddingh\",\n      destination: \"UC_South\",\n    },\n    Sandown: { routeName: \"Sandown\", src: \"Sandown\", destination: \"UC_North\" },\n  };\n\n  const currentTime = new Date();\n  const [route, setRoute] = useState(\"Hiddingh\"); // Default route\n  const [src, setSrc] = useState(routesData[route].src); // Default source\n  const [destination, setDestination] = useState(routesData[route].destination); // Default destination\n\n  const [formattedTime, setFormattedTime] = useState(\"\");\n  const [nextBus, setNextBus] = useState(\"\");\n\n  const [showOptions, setShowOptions] = useState(false);\n  const routeOptions = Object.keys(routesData);\n\n  const [waitingTime, setWaitingTime] = useState(\"\");\n  const [isFetching, setIsFetching] = useState(false); // Prevent duplicate fetches\n\n  // Toggle the options list visibility\n  const toggleOptions = () => setShowOptions(!showOptions);\n\n  const switchPlaces = () => {\n    const tempSrc = src;\n    const tempDest = destination;\n    setSrc(tempDest);\n    setDestination(tempSrc);\n    console.log(`Switching: source ${tempSrc} dest ${tempDest}`);\n\n    // Recalculate bus times after switching\n    setFormattedTime(getCurrentFormattedTime()); // Ensure time is updated\n  };\n\n  // Handle route selection\n  const selectRoute = (selectedRoute) => {\n    setRoute(selectedRoute);\n    const selectedRouteData = routesData[selectedRoute];\n    setShowOptions(false); // Close the options list after selection\n    setSrc(selectedRouteData.src);\n    setDestination(selectedRouteData.destination);\n  };\n\n  // Fetch bus times based on route, source, and destination\n  function getNextTimes(route) {\n    if (isFetching) return; // Prevent fetching if already in progress\n\n    setIsFetching(true);\n    // Fetch the JSON file corresponding to the route\n    fetch(process.env.PUBLIC_URL + \"/assets/\" + route + \".json\")\n      .then((response) => response.json())\n      .then((data) => {\n        // Get the correct schedule based on the day NA for now\n        findNextBus(data.schedule.weekday, src, destination);\n        setIsFetching(false); // Reset fetching status\n      });\n  }\n\n  function findNextBus(schedule, src_arg, dst_arg) {\n    let currentHour = currentTime.getHours();\n    let currentMinute = currentTime.getMinutes();\n    let currentTimeInMinutes = currentHour * 60 + currentMinute;\n\n    let closestTime = null;\n    let closestRow = null;\n\n    for (let row of schedule) {\n      for (let stop in row) {\n        if (stop === src_arg) {\n          let timeParts = row[stop].split(\":\"); // Split the time string (e.g., \"6:30\")\n          let busHour = parseInt(timeParts[0], 10);\n          let busMinute = parseInt(timeParts[1], 10);\n          let busTimeInMinutes = busHour * 60 + busMinute;\n\n          // Check if this time is greater than or equal to current time and closer\n          if (busTimeInMinutes >= currentTimeInMinutes) {\n            if (closestTime === null || busTimeInMinutes < closestTime) {\n              closestTime = busTimeInMinutes;\n              closestRow = row;\n            }\n          }\n        }\n      }\n    }\n\n    if (closestTime !== null) {\n      setNextBus(closestRow[src_arg]);\n      setWaitingTime(calculateWaitingTime(closestRow[src_arg]));\n      console.log(\n        `Next bus from ${src_arg} to ${dst_arg} departs at ${closestRow[src_arg]}`\n      );\n      return closestRow;\n    } else {\n      console.log(`No more buses from ${src_arg} to ${dst_arg} today.`);\n      return null;\n    }\n  }\n\n  function getCurrentFormattedTime() {\n    const currentTime = new Date();\n    const hours = currentTime.getHours();\n    const minutes = currentTime.getMinutes().toString().padStart(2, \"0\");\n    return `${hours}:${minutes}`;\n  }\n\n  useEffect(() => {\n    const time = getCurrentFormattedTime();\n    setFormattedTime(time);\n  }, []);\n\n  // Consolidated useEffect for route, src, destination changes\n  useEffect(() => {\n    if (src && destination && route) {\n      getNextTimes(route); // Fetch new bus times when route, src, or destination changes\n    }\n  }, [route, src, destination]); // Trigger this effect only when these dependencies change\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Next Bus:</h1>\n        <div className=\"dropdown-container\">\n          <span className=\"dropdown\" onClick={toggleOptions}>\n            {route}\n          </span>\n          {showOptions && (\n            <div className=\"dropdown-options\">\n              {routeOptions.map((option, index) => (\n                <div\n                  key={index}\n                  className=\"dropdown-item\"\n                  onClick={() => selectRoute(option)}\n                >\n                  {option}\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </header>\n\n      <main>\n        <div className=\"information\">\n          <div className=\"reverseButton\" onClick={switchPlaces}>\n            <h5>reverse</h5>\n          </div>\n          <h2 id=\"route-info\">\n            Going from <span className=\"bold-blue\">{src}</span> to{\" \"}\n            <span className=\"bold-blue\">{destination}</span> at{\" \"}\n            <span className=\"bold-blue\">{formattedTime}</span> the bus comes at{\" \"}\n            <span className=\"bold-red\">{nextBus}</span>\n          </h2>\n          <h4>\n            You'll be waiting <span id=\"waiting-time\">{waitingTime}</span>{\" \"}\n            minutes\n          </h4>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}